<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ErrorControlSystem</name>
    </assembly>
    <members>
        <member name="M:ErrorControlSystem.ErrorHandlingOption.LoadDefaultSettings">
            <summary>
            Loads the app config settings to set default all properties.
            </summary>
        </member>
        <member name="M:ErrorControlSystem.ErrorHandlingOption.FullOptions">
            <summary>
            Check Alls the Options to true value.
            </summary>
        </member>
        <member name="M:ErrorControlSystem.ErrorHandlingOption.NoneOptions">
            <summary>
            UnCheck Alls the Options.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.AtSentState">
            <summary>
            Get or Set startup sent state, that for sent cache data to server in application startup or not.
            Default value is false.
            Used for know application closing and disconnection between sent state.
            Or new exception raising will be caused to sent data to server
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.SentOnStartup">
            <summary>
            Get or Set startup sent state, that for sent cache data to server in application startup or not.
            Default value is false.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.ExpireHours">
            <summary>
            Gets or sets the expire hours for sent errors from cache to server.
            ExpireHours is how many hours may be past after first logged error.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.IsRunningFromIDE">
            <summary>
            Gets a value indicating whether the current process is running by IDE (Visual Studio) or Execute file ?
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.ExitApplicationImmediately">
            <summary>
            Gets or sets a value indicating whether the application will exit after handling and logging an unhandled exception.
            Default value is true. 
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.HandleProcessCorruptedStateExceptions">
            <summary>
            Gets or sets a value indicating whether to handle exceptions even in a corrupted process thought the 'HandleProcessCorruptedStateExceptions'
            flag. The default value for this is false since generating exception handlers for a corrupted process may not be successful so use with caution.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.CacheFilled">
            <summary>
            Gets true when cache size filled, otherwise false.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.CacheLimitSize">
            <summary>
            Gets or sets the size of error caches that each time an exception occurs, 
            the ECS bug reporters is prepared to be send to the server.
            Default value is 4194304 bytes.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.MaxQueuedError">
            <summary>
            Gets or sets the number of error reports that can be queued for submission. 
            Each time an exception occurs, the exception handler is prepared to
            be send data. If submission fails (i.e. there is no Internet connection), the queue grows with each additional
            exception and resulting bug reports. This limits the max no of queued reports to limit the disk space usage.
            Default value is 500.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.ReleaseMode">
            <summary>
            Gets a value indicating whether in the release mode for the Error Control System library. 
            In release mode the internal developer UI is not displayed.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.StoragePath">
            <summary>
            Gets or sets the ErrorControlSystem errors storage path. 
            After an exception occurs, the exception handlers are created and queued for submission.
            Until then, the reports will be stored in this location. 
            Default value is the LocalApplicationData directory.
            This setting can either be assigned a full path string or a value from <see cref="T:ErrorControlSystem.CacheErrors.StoragePaths"/> enumeration.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.CustomStoragePath">
            <summary>
            Gets or sets the ErrorControlSystem errors custom storage path.
            Default value is <see cref="F:System.String.Empty"/>
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.ReportHandledExceptions">
            <summary>
            Gets or sets a value indicating whether report handled exceptions or not?
            If you want also to report handled exceptions, so set it to <C>true</C>; otherwise, <c>false</c>.
            Default value is true.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.ErrorLogPath">
            <summary>
            Gets or sets the error log path.
            </summary>
            <value>
            The error log path.
            </value>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.DisplayDeveloperUI">
            <summary>
            Gets or sets a value indicating whether to enable developer user interface facilities which enable easier diagnosis of
            code maps and other internal errors.
            Condition for display developer UI is that application running from IDE and DisplayUnhandledExceptions value was true.
            Default value is true.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.EnableNetworkSending">
            <summary>
            Gets or sets a value indicating whether to enable send error data to network server.
            For example when network is crashed or database is dropped then should be not send data.
            Network sending is enabled by default.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.FetchServerDateTime">
            <summary>
            Gets or sets a value indicating whether network sending is enabled and can to fetch date and time form server.
            Default value is true.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.Snapshot">
            <summary>
            Gets or sets a value indicating whether can to capture screen.
            Default value is true.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.LogOnTheFly">
            <summary>
            Log errors without caching on the local system
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.ResizeSnapshots">
            <summary>
            Gets or sets a value indicating whether resize snapshots.
            Default value is true but snapshot property also must be true.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.DisplayUnhandledExceptions">
            <summary>
            Gets or sets a value indicating whether display unhandled exceptions.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.FilterExceptions">
            <summary>
            Gets or sets a value indicating whether filter exceptions enabled or not ?
            Default value is true.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ErrorHandlingOption.CacheCodeScope">
            <summary>
            Gets the cache code scope.
            </summary>
        </member>
        <member name="T:ErrorControlSystem.ErrorHandlingOptions">
            <summary>
            Specifies the application elements on which it is valid to apply an attribute.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:ErrorControlSystem.Properties.Localization">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Properties.Localization.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Properties.Localization.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Properties.Localization.BtnContinue">
            <summary>
              Looks up a localized string similar to Continue.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Properties.Localization.BtnExit">
            <summary>
              Looks up a localized string similar to Exit.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Properties.Localization.DispatcherUnhandledException">
            <summary>
              Looks up a localized string similar to Dispatcher Unhandled Exception.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Properties.Localization.ECS">
            <summary>
              Looks up a localized string similar to Error Control System.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Properties.Localization.FirstChanceException">
            <summary>
              Looks up a localized string similar to First Chance Exception.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Properties.Localization.UnhandledException">
            <summary>
              Looks up a localized string similar to Unhandled Exception.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Properties.Localization.UnhandledThreadException">
            <summary>
              Looks up a localized string similar to Unhandled Thread Exception.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Properties.Localization.UnobservedTaskException">
            <summary>
              Looks up a localized string similar to Unobserved Task Exception.
            </summary>
        </member>
        <member name="M:ErrorControlSystem.CacheErrors.CacheController.CheckStateAsync">
            <summary>
            Check Cache State to Send Data to Server or Not ?
            </summary>
        </member>
        <member name="T:ErrorControlSystem.CacheErrors.StorageRouter">
            <summary>
            Routing Where the data must be saved
            </summary>
        </member>
        <member name="M:ErrorControlSystem.CacheErrors.StorageRouter.GetDirectorySize(System.IO.DirectoryInfo)">
            <summary>
            Get Size of directory by all sub directory and files.
            </summary>
            <param name="dir">The Directory</param>
            <returns>Size (bytes) of Directory</returns>
        </member>
        <member name="M:ErrorControlSystem.CacheErrors.StorageRouter.GetPath(ErrorControlSystem.CacheErrors.StoragePaths)">
            <summary>
            Gets the <see cref="T:System.String"/> path of the given <see cref="T:ErrorControlSystem.CacheErrors.StoragePaths"/> path.
            </summary>
            <param name="path">The <see cref="T:ErrorControlSystem.CacheErrors.StoragePaths"/> path.</param>
            <returns>Converted path + app caching folders</returns>
        </member>
        <member name="T:ErrorControlSystem.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Properties.Resources.error_control_system">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="M:ErrorControlSystem.ServerController.ServerTransmitter.InitialTransmitterAsync">
            <summary>
            Initials the transmitter asynchronous.
            Check the server and then database existence and ...
            </summary>
        </member>
        <member name="M:ErrorControlSystem.ServerController.ServerTransmitter.SqlServerManager.GetSqlDatabasesAsync(ErrorControlSystem.DbConnectionManager.Connection)">
            <summary>
            Gets the SQL databases asynchronous.
            </summary>
        </member>
        <member name="M:ErrorControlSystem.ServerController.ServerTransmitter.SqlServerManager.GetSqlServersInstanceAsync">
            <summary>
            Gets the servers asynchronous.
            </summary>
        </member>
        <member name="F:ErrorControlSystem.Shared.CodeScope.Empty">
            <devdoc>
               Creates a new instance of the <see cref="T:ErrorControlSystem.Shared.CodeScope"/> class
               with member data left uninitialized.
            </devdoc>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.Shared.CodeScope"/> class
            with the specified exception data to file code line and column from that stack trace.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="namespaceName">Name of namespace</param>
            <param name="className">Name of the class.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.Shared.CodeScope"/> class
            with the specified exception data to file code line and column from that stack trace.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="namespaceName">Name of the namespace.</param>
            <param name="className">Name of the class.</param>
            <param name="methodName">Name of the method.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNo">The line no.</param>
            <param name="columnNo">The column no.</param>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.Shared.CodeScope"/> class
            with the specified exception data to file code line and column from that stack trace.
            </summary>
            <param name="lineNo">The line no.</param>
            <param name="columnNo">The column no.</param>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.#ctor(System.Diagnostics.StackFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.Shared.CodeScope"/> class
            with the specified exception data to file code line and column from that stack trace.
            </summary>
            <param name="frame">The stack frame to fetch assembly, class, method and etc names from that's.</param>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.Shared.CodeScope"/> class
            with the specified exception data to file code line and column from that stack trace.
            </summary>
            <param name="exp">The <see cref="T:System.Exception"/> to fetch assembly, class, method and etc names from that's stack trace.</param>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.IsCallFromThisPlace(System.Collections.Generic.IEnumerable{System.Diagnostics.StackFrame})">
            <summary>
            Is call method from this code place.
            </summary>
            <param name="frames">The frames of call methods or exception stackTrace frames.</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.Equals(System.Object)">
            <devdoc>
               <para>
                  Specifies whether this <see cref="T:ErrorControlSystem.Shared.CodeScope"/> contains
                  the same coordinates as the specified <see cref="T:System.Object"/>.
               </para>
            </devdoc>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.GetHashCode">
            <devdoc>
               <para>
                  Returns a hash code.
               </para>
            </devdoc>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.ToString(ErrorControlSystem.Shared.CodeScopeStringFormat)">
            <devdoc>
               <para>
                  Converts this <see cref="T:ErrorControlSystem.Shared.CodeScope"/>
                  to a human readable
                  string.
               </para>
            </devdoc>
            <param name="format">Return value by specified <see cref="T:ErrorControlSystem.Shared.CodeScopeStringFormat"/> format</param>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.Parse(System.Diagnostics.StackFrame)">
            <summary>
            Parses the specified frame.
            </summary>
            <param name="frame">The stack frame to fetch assembly, class, method and etc names from that's.</param>
            <returns>Instance of the <see cref="T:ErrorControlSystem.Shared.CodeScope"/></returns>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.op_Explicit(System.Diagnostics.StackFrame)~ErrorControlSystem.Shared.CodeScope">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Diagnostics.StackFrame"/> to <see cref="T:ErrorControlSystem.Shared.CodeScope"/>.
            </summary>
            <param name="frame">The stack frame to fetch assembly, class, method and etc names from that's.</param>
            <returns>
            The result of the conversion is a instance of the <see cref="T:ErrorControlSystem.Shared.CodeScope"/>
            </returns>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.op_Equality(ErrorControlSystem.Shared.CodeScope,ErrorControlSystem.Shared.CodeScope)">
            <devdoc>
               <para>
                  Compares two <see cref="T:ErrorControlSystem.Shared.CodeScope"/> objects. The result specifies
                  whether the values of the <see cref="P:ErrorControlSystem.Shared.CodeScope.Line"/> and 
                  <see cref="P:ErrorControlSystem.Shared.CodeScope.Column"/> and <see cref="P:ErrorControlSystem.Shared.CodeScope.Namespace"/> and
                  <see cref="P:ErrorControlSystem.Shared.CodeScope.Class"/> and <see cref="P:ErrorControlSystem.Shared.CodeScope.Method"/> properties of the two <see cref="T:ErrorControlSystem.Shared.CodeScope"/>
                  objects are equal.
               </para>
            </devdoc>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.op_Inequality(ErrorControlSystem.Shared.CodeScope,ErrorControlSystem.Shared.CodeScope)">
            <devdoc>
               <para>
                  Compares two <see cref="T:ErrorControlSystem.Shared.CodeScope"/> objects. The result specifies whether the values
                  of the <see cref="P:ErrorControlSystem.Shared.CodeScope.Line"/> or 
                  <see cref="P:ErrorControlSystem.Shared.CodeScope.Column"/> or <see cref="P:ErrorControlSystem.Shared.CodeScope.Namespace"/> or
                  <see cref="P:ErrorControlSystem.Shared.CodeScope.Class"/> or <see cref="P:ErrorControlSystem.Shared.CodeScope.Method"/> properties of the two
               <see cref="T:ErrorControlSystem.Shared.CodeScope"/> 
               objects are unequal.
            </para>
            </devdoc>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.Parse(System.String)">
            <devdoc>
               <para>
                  Converts a human readable
                  string to this <see cref="T:ErrorControlSystem.Shared.CodeScope"/>
               </para>
            </devdoc>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.TryParse(System.String,ErrorControlSystem.Shared.CodeScope@)">
            <devdoc>
               <para>
                  Try to Converts a human readable
                  string to this <see cref="T:ErrorControlSystem.Shared.CodeScope"/>
               </para>
            </devdoc>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.StackFramesToString(System.Diagnostics.StackFrame[])">
            <summary>
            Convert stacks the frames to string.
            </summary>
            <devdoc>
               <para>
            Reference: http://referencesource.microsoft.com/mscorlib/system/diagnostics/stacktrace.cs.html#f4bbb1fa2df8ea1f
               </para>
            </devdoc>
            <param name="frames">The array of <see cref="T:System.Diagnostics.StackFrame"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:ErrorControlSystem.Shared.CodeScope.Equals(ErrorControlSystem.Shared.CodeScope)">
            <devdoc>
               <para>
                  Specifies whether this <see cref="T:ErrorControlSystem.Shared.CodeScope"/> contains
                  the same coordinates as the specified <see cref="T:ErrorControlSystem.Shared.CodeScope"/>.
               </para>
            </devdoc>
        </member>
        <member name="P:ErrorControlSystem.Shared.CodeScope.Line">
            <devdoc>
               Gets the line-coordinate of this <see cref="T:ErrorControlSystem.Shared.CodeScope"/>.
            </devdoc>
        </member>
        <member name="P:ErrorControlSystem.Shared.CodeScope.Column">
            <devdoc>
               <para>
                  Gets the column-coordinate of this <see cref="T:ErrorControlSystem.Shared.CodeScope"/>.
               </para>
            </devdoc>
        </member>
        <member name="F:ErrorControlSystem.DbConnectionManager.Connection.Items">
            <summary>
            Use to add or remove ConnectionItem instances to a Connection.
            </summary>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.Connection.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.DbConnectionManager.Connection"/> class.
            </summary>
            <param name="server">The server name or IP or data source.</param>
            <param name="database">The database name or initialCatalog.</param>
            <param name="timeOut">The time out always grater than zero 0.</param>
            <param name="username">The database author user name.</param>
            <param name="pass">The database author password.</param>
            <param name="description">Gets or sets the description of the Connection object.</param>
            <param name="portNumber">The port number.</param>
            <param name="attachDbFilename">The attach database filename.</param>
            <param name="provider">Name of the provider.</param>
            <param name="name">Name of the connection</param>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.Connection.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.DbConnectionManager.Connection"/> class.
            </summary>
            <param name="server">The server name or IP or data source.</param>
            <param name="database">The database name or initialCatalog.</param>
            <param name="timeOut">The time out always grater than zero 0.</param>
            <param name="username">The database author user name.</param>
            <param name="pass">The database author password.</param>
            <param name="description">Gets or sets the description of the Connection object.</param>
            <param name="name">Name of the connection</param>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.Connection.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.DbConnectionManager.Connection"/> class.
            </summary>
            <param name="server">The server name or IP or data source.</param>
            <param name="database">The database name or initialCatalog.</param>
            <param name="timeOut">The time out always grater than zero 0.</param>
            <param name="username">The database author user name.</param>
            <param name="pass">The database author password.</param>
            <param name="name">Name of the connection</param>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.Connection.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.DbConnectionManager.Connection"/> class.
            </summary>
            <param name="server">The server name or IP or data source.</param>
            <param name="database">The database name or initialCatalog.</param>
            <param name="username">The database author user name.</param>
            <param name="pass">The database author password.</param>
            <param name="description">Gets or sets the description of the Connection object.</param>
            <param name="name">Name of the connection</param>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.Connection.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.DbConnectionManager.Connection"/> class.
            </summary>
            <param name="server">The server name or IP or data source.</param>
            <param name="database">The database name or initialCatalog.</param>
            <param name="username">The database author user name.</param>
            <param name="pass">The database author password.</param>
            <param name="name">Name of the connection</param>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.Connection.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.DbConnectionManager.Connection"/> class.
            </summary>
            <param name="server">The server name or IP or data source.</param>
            <param name="database">The database name or initialCatalog.</param>
            <param name="name">Name of the connection</param>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.Connection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.DbConnectionManager.Connection"/> class.
            Server is <c>Master</c>
            </summary>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.Connection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.DbConnectionManager.Connection"/> class.
            </summary>
            <param name="connString">The connection string.</param>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.Connection.#ctor(ErrorControlSystem.DbConnectionManager.Connection)">
            <summary>
            Initializes a new instance of the <see cref="T:ErrorControlSystem.DbConnectionManager.Connection"/> class.
            </summary>
            <param name="conn">The connection object.</param>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.Connection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            <example>
                <connectionStrings>
                    <add name="TestConnectionString" connectionString="Data Source=localhost;Initial Catalog=Test;Persist Security Info=True;User ID=sa;Password=p12345" providerName="System.Data.SqlClient"/>
                </connectionStrings>
            </example>
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="F:ErrorControlSystem.DbConnectionManager.ConnectionCollection.Items">
            <summary>
            Use to add or remove ConnectionItem instances to list.
            </summary>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionCollection.Find(System.String)">
            <summary>
            Find a Connection instance using name and server type.
            <param name="connectionName">The Connection name.</param>
            </summary>
            <returns>If the connection name is exist then return Connection, either not exist return null</returns>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionCollection.Remove(System.String)">
            <summary>
            Remove a Connection instance from the Connection.
            </summary>
            <param name="name">The Connection name</param>
            <returns></returns>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionCollection.Remove(ErrorControlSystem.DbConnectionManager.Connection)">
            <summary>
            Remove a Connection instance from the Connection.
            </summary>
            <param name="item">The Connection.</param>
            <returns></returns>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionCollection.Add(ErrorControlSystem.DbConnectionManager.Connection)">
            <summary>
            Add a new Connection instance.  
            Add ConnectionItems to the Connection instance before adding it to the Connection.
            </summary>
            <param name="conn">The Connection.</param>
            <returns></returns>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionCollection.CopyTo(ErrorControlSystem.DbConnectionManager.Connection[],System.Int32)">
            <summary>
            Copy this Array to destining array from arrayIndex
            </summary>
            <param name="array">destination array for copy to that</param>
            <param name="arrayIndex">Beginning point of array</param>
            <exception cref="T:System.ArgumentNullException">If the array is null</exception>
            <exception cref="T:System.ArgumentException">If the array is not 1D, so Rank is not less or greater than 1</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the arrayIndex is less than 0</exception>
            <exception cref="T:System.ArgumentException">If the array.Length - arrayIndex is less than sourceArray.Count()</exception>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionManager.IsServerOnline">
            <summary>
                Check giver server name by all connected server on the this network and find that.
            </summary>
            <returns>If find serverName in network then return True, otherwise return False.</returns>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionManager.IsNetworkAvailable">
            <summary>
            Indicates whether any network connection is available
            </summary>
            <returns>
                <c>true</c> if a network connection is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionManager.IsServerOnlineAsync">
            <summary>
                Check giver server name by all connected server on the this network and find that.
            </summary>
            <returns>If find serverName in network then return True, otherwise return False.</returns>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionManager.Open">
            <summary>
            Opens this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Connection was not Closed.
            The Connection current state is Open.
            </exception>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionManager.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Open connection the asynchronous.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>void</returns>
            <exception cref="T:System.InvalidOperationException">
            The Connection was not Closed.
            The Connection current state is Open.
            </exception>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionManager.OpenAsync">
            <summary>
            Open connection the asynchronous.
            </summary>
            <returns>void</returns>
            <exception cref="T:System.InvalidOperationException">
            The Connection was not Closed.
            The Connection current state is Open.
            </exception>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionManager.Close">
            <summary>
            Open connection the asynchronous.
            </summary>
            <returns>void</returns>
            <exception cref="T:System.InvalidOperationException">
            The Connection was not Open.
            The Connection current state is Closed.
            </exception>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionManager.SaveToXml(System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Xml.Linq.XElement"/> that represents this instance.
            <example>
                <connectionStrings>
                    <add name="TestConnectionString1" connectionString="Data Source=localhost;Initial Catalog=Test;Persist Security Info=True;User ID=sa;Password=p12345" providerName="System.Data.SqlClient"/>
                    <add name="TestConnectionString2" connectionString="Data Source=Behzad-PC;Initial Catalog=Test;Persist Security Info=True;User ID=sa;Password=123" providerName="System.Data.SqlClient"/>
                    <add name="TestConnectionString3" connectionString="Data Source=Frosh;Initial Catalog=Test;Integration Security=True" providerName="System.Data.SqlClient"/>
                </connectionStrings>
            </example>
            </summary>
            <returns>
            A <see cref="T:System.Xml.Linq.XElement"/> that represents this instance.
            </returns>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionManager.LoadFromXml(System.String)">
            <summary>
            Load an xml document with ConnectionManager configuration information.
            </summary>
            <param name="xmlText">The XML text.</param>
            <returns></returns>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionManager.Add(ErrorControlSystem.DbConnectionManager.Connection,System.String)">
            <summary>
            Add a new Connection instance.  
            Add ConnectionItems to the Connection instance before adding it to the ConnectionManager.
            </summary>
            <param name="name">Connection Name</param>
            <param name="conn">The connection.</param>
            <returns>ConnectionManager</returns>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionManager.Edit(ErrorControlSystem.DbConnectionManager.Connection,System.String)">
            <summary>
            Edit a new Connection instance.  
            Update ConnectionItems to the Connection instance before adding it to the ConnectionManager.
            </summary>
            <param name="name">Name of connection in list.</param>
            <param name="conn">The connection.</param>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionManager.Edit(ErrorControlSystem.DbConnectionManager.Connection)">
            <summary>
            Edit a new Connection instance.  
            Update ConnectionItems to the Connection instance before adding it to the ConnectionManager.
            </summary>
            <param name="conn">The connection.</param>
        </member>
        <member name="M:ErrorControlSystem.DbConnectionManager.ConnectionManager.Find(System.String)">
            <summary>
            Find a Connection instance using name and server type.
            <param name="connectionName">The connection name.</param>
            </summary>
            <returns></returns>
        </member>
        <member name="P:ErrorControlSystem.DbConnectionManager.ConnectionManager.ServerVersion">
            <summary>
            Get SqlConnection Server Version.
            </summary>
            <exception cref="T:System.InvalidOperationException">Maybe the object throw this exception</exception>
        </member>
        <member name="T:ErrorControlSystem.ExceptionHandler">
            <summary>
            Additional Data attached to exception object.
            </summary>
        </member>
        <member name="F:ErrorControlSystem.ExceptionHandler.OnShowUnhandledError">
            <summary>
            Represents the method that will handle the event raised by an exception that is not handled by the application domain.
            </summary>
        </member>
        <member name="M:ErrorControlSystem.ExceptionHandler.RaiseLog(System.Exception,System.Boolean,System.String)">
            <summary>
            Raise log of handled error's.
            </summary>
            <param name="exp">The Error object.</param>
            <param name="isHandled">Is handled exception or unhandled ?</param>
            <param name="errorTitle">Determine the mode of occurrence of an error in the program.</param>
            <returns><see cref="T:ErrorControlSystem.Shared.ProcessFlow"/></returns>
        </member>
        <member name="T:ErrorControlSystem.ExceptionHandler.Engine">
            <summary>
            Exceptions Handler Engine Class
            for handling any exception from your attachment applications. 
            </summary>
        </member>
        <member name="M:ErrorControlSystem.ExceptionHandler.Engine.FirstChanceExceptionHandler(System.Object,System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs)">
            <summary>
            This is new to .Net 4 and is extremely useful for ensuring that you ALWAYS log SOMETHING.
            Whenever any kind of exception is fired in your application, a FirstChangeExcetpion is raised,
            even if the exception was within a Try/Catch block and safely handled.
            This is GREAT for logging every wart and boil, but can often result in too much spam, 
            if your application has a lot of expected/handled exceptions.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ErrorControlSystem.ExceptionHandler.Engine.UnobservedTaskExceptionHandler(System.Object,System.Threading.Tasks.UnobservedTaskExceptionEventArgs)">
            <summary>
            If you are using Tasks, then you may have "unobserved task exceptions". 
            This event allows you to trap them. It also has a method called SetObserved,
            which allows you to try to recover from the issue.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ErrorControlSystem.ExceptionHandler.Engine.ThreadExceptionHandler(System.Object,System.Threading.ThreadExceptionEventArgs)">
            <summary>
            If you are hosting any WinForm components in your WPF application, 
            this final event is one to watch. There's no way to influence events thereafter, 
            but at least you get to see what the problem was.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Threading.ThreadExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ErrorControlSystem.ExceptionHandler.Engine.UnhandledExceptionHandler(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Catch all unhandled exceptions in all threads.
            Although Application.DispatcherUnhandledException covers most issues in the current AppDomain, 
            in extremely rare circumstances, you may be running a thread on a second AppDomain. 
            This event conveys the other AppDomain unhandled exception, 
            but there are no Handled property, just an IsTerminating flag.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.UnhandledExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ErrorControlSystem.ExceptionHandler.Engine.DispatcherUnhandledExceptionHandler(System.Object,System.Windows.Threading.DispatcherUnhandledExceptionEventArgs)">
            <summary>
            Used for handling WPF exceptions bound to the UI thread.
            Handles the <see cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler"/> events.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:ErrorControlSystem.ExceptionHandler.Engine.DispatcherUnhandledException">
            <summary>
            Used for handling WPF exceptions bound to the UI thread.
            Handles the <see cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler"/> events.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ExceptionHandler.Engine.ThreadException">
            <summary>
            Used for handling WinForms exceptions bound to the UI thread.
            Handles the <see cref="T:System.Threading.ThreadExceptionEventHandler"/> events in <see cref="T:System.Windows.Forms.Application"/> namespace.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ExceptionHandler.Engine.UnhandledException">
            <summary>
            Used for handling general exceptions bound to the main thread.
            Handles the <see cref="E:System.AppDomain.UnhandledException"/> events in <see cref="N:System"/> namespace.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ExceptionHandler.Engine.UnobservedTaskException">
            <summary>
            Used for handling System.Threading.Tasks bound to a background worker thread.
            Handles the <see cref="P:ErrorControlSystem.ExceptionHandler.Engine.UnobservedTaskException"/> event in <see cref="N:System.Threading.Tasks"/> namespace.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.ExceptionHandler.Engine.FirstChanceException">
            <summary>
            This is new to .Net 4 and is extremely useful for ensuring that you ALWAYS log SOMETHING.
            Whenever any kind of exception is fired in your application, a FirstChangeExcetpion is raised,
            even if the exception was within a Try/Catch block and safely handled.
            This is GREAT for logging every wart and boil, but can often result in too much spam, 
            if your application has a lot of expected/handled exceptions.
            </summary>
        </member>
        <member name="F:ErrorControlSystem.ExceptionHandler.Filter.ExemptedExceptionTypes">
            <summary>
            List of exceptions that happen but not logs.
            </summary>
        </member>
        <member name="F:ErrorControlSystem.ExceptionHandler.Filter.NonSnapshotExceptionTypes">
            <summary>
            List of the exception types that do not have a screen capture.
            </summary>
        </member>
        <member name="F:ErrorControlSystem.ExceptionHandler.Filter.AttachExtraData">
            <summary>
            Dictionary of key/value data that will be stored in exceptions as additional data.
            </summary>
        </member>
        <member name="F:ErrorControlSystem.ExceptionHandler.Filter.ExemptedCodeScopes">
            <summary>
            List of exempted code places to do not raise error logs
            </summary>
        </member>
        <member name="F:ErrorControlSystem.ExceptionHandler.Filter.JustRaiseErrorCodeScopes">
            <summary>
            The just raise error from these code scope collection.
            Do not raise any exception in other code places.
            </summary>
        </member>
        <member name="M:ErrorControlSystem.ExceptionHandler.Filter.IsFiltering(System.Exception,System.Diagnostics.StackFrame[],System.Boolean@)">
            <summary>
            Determines whether the specified exp is filtering.
            </summary>
            <param name="exp">The exp.</param>
            <param name="callStackFrames"><see cref="T:System.Diagnostics.StackTrace"/> array</param>
            <param name="snapshot">has snapshot or not?</param>
            <returns></returns>
        </member>
        <member name="T:ErrorControlSystem.Resources.EmbeddedAssembly">
            <summary>
            A class for loading Embedded Assembly
            </summary>
        </member>
        <member name="M:ErrorControlSystem.Resources.EmbeddedAssembly.Load(System.String)">
            <summary>
            Load Assembly, DLL from Embedded Resources into memory.
            </summary>
            <param name="embeddedResource">File Name. Example: SomeTools.dll</param>
        </member>
        <member name="M:ErrorControlSystem.Resources.EmbeddedAssembly.Get(System.String)">
            <summary>
            Retrieve specific loaded DLL/assembly from memory
            </summary>
            <param name="assemblyFullName"></param>
            <returns></returns>
        </member>
        <member name="F:ErrorControlSystem.Shared.Error.DicExtraData">
            <summary>
            Dictionary of key/value data that will be stored in exceptions as additional data.
            </summary>
        </member>
        <member name="M:ErrorControlSystem.Shared.Error.#ctor(System.Exception,System.Diagnostics.StackFrame[],System.Boolean)">
            <summary>
            Get handled exception's by additional data.
            </summary>
            <param name="exp">&gt;The occurrence raw error.</param>
            <param name="frames">The array of <see cref="T:System.Diagnostics.StackFrame"/> to changes by exception stackTrace</param>
            <param name="snapshot">Capture screen or not?</param>
        </member>
        <member name="M:ErrorControlSystem.Shared.Error.Equals(System.Object)">
            <devdoc>
               <para>
                  Specifies whether this <see cref="T:ErrorControlSystem.Shared.IError"/> contains
                  the same coordinates as the specified <see cref="T:System.Object"/>.
               </para>
            </devdoc>
        </member>
        <member name="M:ErrorControlSystem.Shared.Error.GetHashCode">
            <devdoc>
               <para>
                  Returns a hash code.
               </para>
            </devdoc>
        </member>
        <member name="M:ErrorControlSystem.Shared.NetworkHelper.GetMacAddress">
            <summary>
            Gets the MAC address of the current PC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ErrorControlSystem.Shared.NetworkHelper.GetIpAddress">
            <summary>
            Gets the IP address of the current PC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ErrorControlSystem.Shared.NetworkHelper.IsNetworkAvailable">
            <summary>
            Indicates whether any network connection is available
            </summary>
            <returns>
                <c>true</c> if a network connection is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ErrorControlSystem.Shared.OperationSystem">
            <summary>
            Provides detailed information about the host operating system.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Shared.OperationSystem.ProgramBits">
            <summary>
            Determines if the current application is 32 or 64-bit.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Shared.OperationSystem.ProcessorBits">
            <summary>
            Determines if the current processor is 32 or 64-bit.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Shared.OperationSystem.Edition">
            <summary>
            Gets the edition of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Shared.OperationSystem.Name">
            <summary>
            Gets the name of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Shared.OperationSystem.ServicePack">
            <summary>
            Gets the service pack information of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Shared.OperationSystem.BuildVersion">
            <summary>
            Gets the build version number of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Shared.OperationSystem.VersionString">
            <summary>
            Gets the full version string of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Shared.OperationSystem.Version">
            <summary>
            Gets the full version of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Shared.OperationSystem.MajorVersion">
            <summary>
            Gets the major version number of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Shared.OperationSystem.MinorVersion">
            <summary>
            Gets the minor version number of the operating system running on this computer.
            </summary>
        </member>
        <member name="P:ErrorControlSystem.Shared.OperationSystem.RevisionVersion">
            <summary>
            Gets the revision version number of the operating system running on this computer.
            </summary>
        </member>
        <member name="F:ErrorControlSystem.Shared.ProcessFlow.Continue">
            <summary>
            This will handle all unhandled exceptions to be able to continue execution.
            </summary>
        </member>
        <member name="F:ErrorControlSystem.Shared.ProcessFlow.Exit">
            <summary>
            This will handle all unhandled exceptions and exit the application.
            </summary>
        </member>
        <member name="M:ErrorControlSystem.Shared.ProxyError.Equals(System.Object)">
            <devdoc>
               <para>
                  Specifies whether this <see cref="T:ErrorControlSystem.Shared.IError"/> contains
                  the same coordinates as the specified <see cref="T:System.Object"/>.
               </para>
            </devdoc>
        </member>
        <member name="M:ErrorControlSystem.Shared.ProxyError.GetHashCode">
            <devdoc>
               <para>
                  Returns a hash code.
               </para>
            </devdoc>
        </member>
        <member name="T:ErrorControlSystem.Shared.ScreenCapture">
            <summary>
            Provides functions to capture the entire screen, or a particular window.
            </summary>
        </member>
        <member name="M:ErrorControlSystem.Shared.ScreenCapture.Capture">
            <summary>
            Creates an Image object containing a screen shot of the entire desktop
            </summary>
            <returns>Screen Captured Image</returns>
        </member>
        <member name="M:ErrorControlSystem.Shared.ScreenCapture.ToBytes(System.Drawing.Image)">
            <summary>
            Convert Image object to bytes array
            </summary>
            <param name="img">Image object to convert.</param>
            <returns>Converted image in frame of bytes array.</returns>
        </member>
        <member name="M:ErrorControlSystem.Shared.ScreenCapture.ToImage(System.Byte[])">
            <summary>
            Convert image bytes array to image object.
            </summary>
            <param name="imgBytes">Image bytes array to convert image.</param>
            <returns>Converted Image Object's.</returns>
        </member>
        <member name="M:ErrorControlSystem.Shared.ScreenCapture.ResizeImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Resizes the image.
            </summary>
            <param name="image">The image.</param>
            <param name="desWidth">Width of the DES.</param>
            <param name="desHeight">Height of the DES.</param>
            <returns></returns>
        </member>
        <member name="F:ErrorControlSystem.CacheErrors.StoragePaths.LocalApplicationData">
            <summary>
            %Temp% directory is the default storage. Usually set to 'C:\Documents and Settings\Username\AppData\Local\AppName AppVersion'.
            </summary>
        </member>
        <member name="F:ErrorControlSystem.CacheErrors.StoragePaths.WindowsTemp">
            <summary>
            %Temp% directory is the default storage. Usually set to 'C:\Documents and Settings\Username\Local Settings\Temp\AppName AppVersion'.
            </summary>
        </member>
        <member name="F:ErrorControlSystem.CacheErrors.StoragePaths.CurrentDirectory">
            <summary>
            Initial working directory, i.e. where the executing assembly (MyProduct.exe) is located.
            </summary>
        </member>
        <member name="F:ErrorControlSystem.CacheErrors.StoragePaths.Custom">
            <summary>
            Custom path should be a full path like 'C:\Documents and Settings\MyUser\Local Settings\Temp'.
            </summary>
            <remarks>Path should not have a trailing slash. If the directory doesn't exist, it is created first.</remarks>
        </member>
        <member name="F:ErrorControlSystem.CacheErrors.StoragePaths.InternetCache">
            <summary>
            The internet cache path
            </summary>
        </member>
        <member name="T:ErrorControlSystem.Shared.UI.Developer.ExceptionViewer">
            <summary>
            Interaction logic for ExceptionViewer.xaml
            </summary>
            <summary>
            ExceptionViewer
            </summary>
        </member>
        <member name="M:ErrorControlSystem.Shared.UI.Developer.ExceptionViewer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ErrorControlSystem.Shared.UI.ExceptionMapper.MessageBlock">
            <summary>
            Interaction logic for MessageBlock.xaml
            </summary>
            <summary>
            MessageBlock
            </summary>
        </member>
        <member name="M:ErrorControlSystem.Shared.UI.ExceptionMapper.MessageBlock.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ErrorControlSystem.Shared.UI.ExceptionMapper.StackFrameBlock">
            <summary>
            Interaction logic for StackFrame.xaml
            </summary>
            <summary>
            StackFrameBlock
            </summary>
        </member>
        <member name="M:ErrorControlSystem.Shared.UI.ExceptionMapper.StackFrameBlock.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ErrorControlSystem.Shared.UI.ExceptionMapper.TreeMep">
            <summary>
            Interaction logic for ExceptionView.xaml
            </summary>
            <summary>
            TreeMep
            </summary>
        </member>
        <member name="M:ErrorControlSystem.Shared.UI.ExceptionMapper.TreeMep.Add(System.Exception)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="exp">The exception item.</param>
            <returns>index of added item at list of controls</returns>
        </member>
        <member name="M:ErrorControlSystem.Shared.UI.ExceptionMapper.TreeMep.Add(ErrorControlSystem.Shared.UI.ExceptionMapper.TreeMapItem)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>index of added item at list of controls</returns>
        </member>
        <member name="M:ErrorControlSystem.Shared.UI.ExceptionMapper.TreeMep.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
